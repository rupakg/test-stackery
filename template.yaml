AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Video processing app with AWS Fargate using Stackery
Resources:
  dockerTaskA26298F2:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: rupakg/docker-ffmpeg-thumb
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref dockerTaskA26298F2LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: rupakg-docker-ffmpeg-thumb
          Name: 0
          Environment:
            - Name: AWS_REGION
              Value: us-east-1
            - Name: INPUT_VIDEO_FILE_URL
              Value: https://s3.amazonaws.com/rg-video-thumbs/test.mp4
            - Name: OUTPUT_S3_PATH
              Value: rg-video-thumbs/thumbnails
            - Name: OUTPUT_THUMBS_FILE_NAME
              Value: test.png
            - Name: POSITION_TIME_DURATION
              Value: 00:01
      Cpu: 256
      ExecutionRoleArn: !GetAtt dockerTaskA26298F2ExecutionRole.Arn
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt dockerTaskA26298F2TaskRole.Arn
      Volumes: []
    DependsOn: dockerTaskA26298F2LogGroup
    Metadata:
      StackeryName: test-video-thumb-task-def
  dockerTaskA26298F2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-dockerTaskA26298F2/rupakg-docker-ffmpeg-thumb
  dockerTaskA26298F2ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  dockerTaskA26298F2TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  function198973DB:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function198973DB
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: runThumbECSTask
      CodeUri: src/runthumbecstask
      Handler: index.handler
      Runtime: nodejs6.10
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref dockerTaskA26298F2
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt dockerTaskA26298F2ExecutionRole.Arn
                - !GetAtt dockerTaskA26298F2TaskRole.Arn
        - S3CrudPolicy:
            BucketName: !Sub ${AWS::StackName}-objectstore4a6d3eee
        - S3CrudPolicy:
            BucketName: !Sub ${AWS::StackName}-objectstore16b4761a
      Environment:
        Variables:
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
          DOCKER_TASK_ARN: !Ref dockerTaskA26298F2
          DOCKER_TASK_SUBNETS_2: !Join
            - ','
            - !Ref DefaultVPCSubnets
          BUCKET_NAME: !Sub ${AWS::StackName}-objectstore4a6d3eee
          BUCKET_NAME_2: !Sub ${AWS::StackName}-objectstore16b4761a
      Events:
        objectStore4A6D3EEE:
          Type: S3
          Properties:
            Bucket: !Ref objectStore4A6D3EEE
            Events:
              - s3:ObjectCreated:*
              - s3:ObjectRemoved:*
    Metadata:
      StackeryName: runThumbECSTask
  objectStore4A6D3EEE:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstore4a6d3eee
    Metadata:
      StackeryName: videoInput
  objectStore16B4761A:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstore16b4761a
    Metadata:
      StackeryName: thumbOutput
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)